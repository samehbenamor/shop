import { MedusaContainer, ProductTypes } from "@medusajs/types";
import { EntityManager } from "typeorm";
import { ProductVariantPricesCreateReq } from "../../types/product-variant";
import { AdminPostProductsReq } from "../../api";
declare type CreateProductsInputData = AdminPostProductsReq[];
declare type ShippingProfileId = string;
declare type SalesChannelId = string;
declare type ProductHandle = string;
declare type VariantIndexAndPrices = {
    index: number;
    prices: ProductVariantPricesCreateReq[];
};
export declare type CreateProductsPreparedData = {
    products: ProductTypes.CreateProductDTO[];
    productsHandleShippingProfileIdMap: Map<ProductHandle, ShippingProfileId>;
    productsHandleSalesChannelsMap: Map<ProductHandle, SalesChannelId[]>;
    productsHandleVariantsIndexPricesMap: Map<ProductHandle, VariantIndexAndPrices[]>;
};
export declare function prepareCreateProductsData({ container, manager, data, }: {
    container: MedusaContainer;
    manager: EntityManager;
    data: CreateProductsInputData;
}): Promise<CreateProductsPreparedData>;
export {};
