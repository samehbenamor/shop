"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowManager = void 0;
var transaction_orchestrator_1 = require("./transaction-orchestrator");
var types_1 = require("./types");
var orchestrator_builder_1 = require("./orchestrator-builder");
var WorkflowManager = /** @class */ (function () {
    function WorkflowManager(container) {
        this.container = container;
    }
    WorkflowManager.unregister = function (workflowId) {
        WorkflowManager.workflows.delete(workflowId);
    };
    WorkflowManager.unregisterAll = function () {
        WorkflowManager.workflows.clear();
    };
    WorkflowManager.getWorkflows = function () {
        return WorkflowManager.workflows;
    };
    WorkflowManager.getTransactionDefinition = function (workflowId) {
        if (!WorkflowManager.workflows.has(workflowId)) {
            throw new Error("Workflow with id \"".concat(workflowId, "\" not found."));
        }
        var workflow = WorkflowManager.workflows.get(workflowId);
        return new orchestrator_builder_1.OrchestratorBuilder(workflow.flow_);
    };
    WorkflowManager.register = function (workflowId, flow, handlers, requiredModules, optionalModules) {
        if (WorkflowManager.workflows.has(workflowId)) {
            throw new Error("Workflow with id \"".concat(workflowId, "\" is already defined."));
        }
        var finalFlow = flow instanceof orchestrator_builder_1.OrchestratorBuilder ? flow.build() : flow;
        WorkflowManager.workflows.set(workflowId, {
            id: workflowId,
            flow_: finalFlow,
            orchestrator: new transaction_orchestrator_1.TransactionOrchestrator(workflowId, finalFlow),
            handler: WorkflowManager.buildHandlers(handlers),
            handlers_: handlers,
            requiredModules: requiredModules,
            optionalModules: optionalModules,
        });
    };
    WorkflowManager.update = function (workflowId, flow, handlers, requiredModules, optionalModules) {
        var e_1, _a;
        if (!WorkflowManager.workflows.has(workflowId)) {
            throw new Error("Workflow with id \"".concat(workflowId, "\" not found."));
        }
        var workflow = WorkflowManager.workflows.get(workflowId);
        try {
            for (var _b = __values(handlers.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                workflow.handlers_.set(key, value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var finalFlow = flow instanceof orchestrator_builder_1.OrchestratorBuilder ? flow.build() : flow;
        WorkflowManager.workflows.set(workflowId, {
            id: workflowId,
            flow_: finalFlow,
            orchestrator: new transaction_orchestrator_1.TransactionOrchestrator(workflowId, finalFlow),
            handler: WorkflowManager.buildHandlers(workflow.handlers_),
            handlers_: workflow.handlers_,
            requiredModules: requiredModules,
            optionalModules: optionalModules,
        });
    };
    WorkflowManager.buildHandlers = function (handlers) {
        var _this = this;
        return function (container) {
            return function (actionId, handlerType, payload) { return __awaiter(_this, void 0, void 0, function () {
                var command, _a, invoke, compensate, input, metadata;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            command = handlers.get(actionId);
                            if (!command) {
                                throw new Error("Handler for action \"".concat(actionId, "\" not found."));
                            }
                            else if (!command[handlerType]) {
                                throw new Error("\"".concat(handlerType, "\" handler for action \"").concat(actionId, "\" not found."));
                            }
                            _a = payload.context, invoke = _a.invoke, compensate = _a.compensate, input = _a.payload;
                            metadata = payload.metadata;
                            if (!(handlerType === types_1.TransactionHandlerType.COMPENSATE)) return [3 /*break*/, 2];
                            return [4 /*yield*/, command[handlerType](container, input, invoke, compensate, metadata)];
                        case 1: return [2 /*return*/, _b.sent()];
                        case 2: return [4 /*yield*/, command[handlerType](container, input, invoke, metadata)];
                        case 3: return [2 /*return*/, _b.sent()];
                    }
                });
            }); };
        };
    };
    WorkflowManager.prototype.begin = function (workflowId, uniqueTransactionId, input) {
        return __awaiter(this, void 0, void 0, function () {
            var workflow, orchestrator, transaction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!WorkflowManager.workflows.has(workflowId)) {
                            throw new Error("Workflow with id \"".concat(workflowId, "\" not found."));
                        }
                        workflow = WorkflowManager.workflows.get(workflowId);
                        orchestrator = workflow.orchestrator;
                        return [4 /*yield*/, orchestrator.beginTransaction(uniqueTransactionId, workflow.handler(this.container), input)];
                    case 1:
                        transaction = _a.sent();
                        return [4 /*yield*/, orchestrator.resume(transaction)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, transaction];
                }
            });
        });
    };
    WorkflowManager.prototype.registerStepSuccess = function (workflowId, idempotencyKey, response) {
        return __awaiter(this, void 0, void 0, function () {
            var workflow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!WorkflowManager.workflows.has(workflowId)) {
                            throw new Error("Workflow with id \"".concat(workflowId, "\" not found."));
                        }
                        workflow = WorkflowManager.workflows.get(workflowId);
                        return [4 /*yield*/, workflow.orchestrator.registerStepSuccess(idempotencyKey, workflow.handler(this.container), undefined, response)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    WorkflowManager.prototype.registerStepFailure = function (workflowId, idempotencyKey, error) {
        return __awaiter(this, void 0, void 0, function () {
            var workflow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!WorkflowManager.workflows.has(workflowId)) {
                            throw new Error("Workflow with id \"".concat(workflowId, "\" not found."));
                        }
                        workflow = WorkflowManager.workflows.get(workflowId);
                        return [4 /*yield*/, workflow.orchestrator.registerStepFailure(idempotencyKey, error, workflow.handler(this.container))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    WorkflowManager.workflows = new Map();
    return WorkflowManager;
}());
exports.WorkflowManager = WorkflowManager;
//# sourceMappingURL=workflow-manager.js.map