import { TransactionStepsDefinition } from "./types";
export declare type ActionHandler = {
    [type: string]: (data: any, context: any) => Promise<any>;
};
interface InternalStep extends TransactionStepsDefinition {
    next?: InternalStep | InternalStep[];
    depth: number;
    parent?: InternalStep | null;
}
export declare class OrchestratorBuilder {
    private steps;
    constructor(steps?: TransactionStepsDefinition);
    load(steps?: TransactionStepsDefinition): this;
    addAction(action: string, options?: Partial<TransactionStepsDefinition>): this;
    replaceAction(existingAction: string, action: string, options?: Partial<TransactionStepsDefinition>): this;
    insertActionBefore(existingAction: string, action: string, options?: Partial<TransactionStepsDefinition>): this;
    insertActionAfter(existingAction: string, action: string, options?: Partial<TransactionStepsDefinition>): this;
    private appendTo;
    appendAction(action: string, to: string, options?: Partial<TransactionStepsDefinition>): this;
    private move;
    moveAction(actionToMove: string, targetAction: string): OrchestratorBuilder;
    moveAndMergeNextAction(actionToMove: string, targetAction: string): OrchestratorBuilder;
    mergeActions(where: string, ...actions: string[]): this;
    deleteAction(action: string, steps?: InternalStep): this;
    pruneAction(action: string): this;
    private findStepByAction;
    private findOrThrowStepByAction;
    private findParentStepByAction;
    private findLastStep;
    private updateDepths;
    build(): TransactionStepsDefinition;
}
export {};
