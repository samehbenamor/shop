import { ExternalModuleDeclaration, InternalModuleDeclaration, LoadedModule, ModuleExports } from "@medusajs/types";
declare global {
    interface MedusaModule {
        getLoadedModules(aliases?: Map<string, string>): {
            [key: string]: LoadedModule;
        }[];
        getModuleInstance(moduleKey: string, alias?: string): LoadedModule;
    }
}
export declare class MedusaModule {
    private static instances_;
    private static modules_;
    private static loading_;
    static getLoadedModules(aliases?: Map<string, string>): {
        [key: string]: LoadedModule;
    }[];
    static clearInstances(): void;
    static isInstalled(moduleKey: string, alias?: string): boolean;
    static getModuleInstance(moduleKey: string, alias?: string): any | undefined;
    private static registerModule;
    static bootstrap<T>(moduleKey: string, defaultPath: string, declaration?: InternalModuleDeclaration | ExternalModuleDeclaration, moduleExports?: ModuleExports, injectedDependencies?: Record<string, any>): Promise<{
        [key: string]: T;
    }>;
    static migrateUp(moduleKey: string, modulePath: string, options?: Record<string, any>): Promise<void>;
    static migrateDown(moduleKey: string, modulePath: string, options?: Record<string, any>): Promise<void>;
}
